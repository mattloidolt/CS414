/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import controller.KioskCont;
import controller.ManagerDisplayCont;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.*;
/**
 *
 * @author mattloidolt
 */
public class ManagerMenu extends javax.swing.JFrame {
    

    /**
     * Creates new form ManagerMenu
     */
    public ManagerMenu() {
        initComponents();
        populateMenuList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        create = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        menuName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        menuList = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(ManagerDisplayCont.getUserName());
        setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
        setMinimumSize(Toolkit.getDefaultToolkit().getScreenSize());
        setPreferredSize(Toolkit.getDefaultToolkit().getScreenSize());

        create.setText("Create New Menu");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        edit.setText("Edit Menu");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete Menu");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Menu Name:");

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        menuList.setText("Menu List");
        menuList.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(layout.createSequentialGroup()
                                .add(menuName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 156, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(delete, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(create, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(edit, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(layout.createSequentialGroup()
                        .add(144, 144, 144)
                        .add(logout)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(menuList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(52, 52, 52)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(menuList, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(create)
                        .add(11, 11, 11)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(edit)
                            .add(menuName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(33, 33, 33)
                        .add(delete)
                        .add(18, 18, 18)
                        .add(logout)
                        .add(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        if (KioskCont.getMenuNames().indexOf(menuName.getText()) != -1) {
            JOptionPane.showOptionDialog(this, "Menu name already in use.", "Error", JOptionPane.DEFAULT_OPTION, 
									JOptionPane.ERROR_MESSAGE, null, null, evt) ;
        }
        else{
            ManagerCreate createGUI = new ManagerCreate(menuName.getText(), this) ;
            createGUI.setTitle(this.getTitle() + " CREATE") ;
            createGUI.setVisible(true) ;
        }
    }//GEN-LAST:event_createActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (KioskCont.getMenuNames().indexOf(menuName.getText()) != -1) {
            Object[] possibilities = {"yes", "no"};
            String text = "Are you sure you want to delete " + menuName.getText() + "?" ;
            String s = (String)JOptionPane.showInputDialog(
                    this, text, "Seriously?",
                    JOptionPane.QUESTION_MESSAGE,
                    null, possibilities, "yes");

            //If a string was returned, check that it was 'yes', delete the menu if so
            if ((s != null) && (s.length() > 0)) {
                if(s.equals("yes")){
                    ManagerDisplayCont.deleteMenu(menuName.getText());
                    menuName.setText("") ;
                }
            }
            populateMenuList();
        }
        else{
            JOptionPane.showOptionDialog(this, "Menu does not exist.", "Error", JOptionPane.DEFAULT_OPTION, 
									JOptionPane.ERROR_MESSAGE, null, null, evt) ;
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        if (KioskCont.getMenuNames().indexOf(menuName.getText()) != -1) {
            ManagerEdit editManager = new ManagerEdit(menuName.getText()) ;
            editManager.setName(this.getTitle() + " EDIT:" + menuName.getText());
            editManager.setVisible(true) ;
        }
        else{
            JOptionPane.showOptionDialog(this, "Menu does not exist.", "Error", JOptionPane.DEFAULT_OPTION, 
									JOptionPane.ERROR_MESSAGE, null, null, evt) ;
        }
    }//GEN-LAST:event_editActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        System.out.println(ManagerDisplayCont.getUserName() + " has logged out.") ;
        this.dispose();
    }//GEN-LAST:event_logoutActionPerformed

    public void populateMenuList(){
        String menuNames = "<html> <h1>Menus</h1><br>";
        try{
            ArrayList<String> menus = KioskCont.getMenuNames() ;
            for( String menu : menus ){
                menuNames += menu + "<br>";
            }
            menuNames += "</html>";
        }catch(Exception e){}
        menuList.setText(menuNames);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ManagerMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logout;
    private javax.swing.JLabel menuList;
    private javax.swing.JTextField menuName;
    // End of variables declaration//GEN-END:variables
}
